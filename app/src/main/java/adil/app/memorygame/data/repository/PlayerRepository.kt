package adil.app.memorygame.data.repository

import adil.app.memorygame.data.local.db.DatabaseService
import adil.app.memorygame.data.local.db.entity.Player
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking

class PlayerRepository(private val databaseService: DatabaseService) {

    /**
     * Ranking all the players based on their scores
     * @param players is the list of players who completed the game
     * @return is the list of players sorted as per their rank.
     */
    private fun setRankToAllUsers(players: List<Player>): List<Player> {
        val list = players.sortedByDescending { it.score }
        var prevRank = 1
        var prevScore = Int.MIN_VALUE
        list.map { user ->
            when {
                prevScore == Int.MIN_VALUE -> {
                    user.rank = prevRank
                }
                user.score == prevScore -> user.rank = prevRank
                else -> user.rank = ++prevRank
            }
            prevScore = user.score
        }
        return list
    }

    /**
     * saving the player in the database
     * @param player is the item which we are storing in database
     * @return is the player id generated by the database
     * on successful storage of the player.
     */
    fun savePlayer(player: Player): Long {
        var id: Long
        runBlocking(Dispatchers.IO) {
            id = databaseService.userDao().insert(player)
        }
        return id
    }

    /**
     * fetching the list of all the players from the database
     */
    fun getAllPlayers(): List<Player> {
        lateinit var list: List<Player>
        runBlocking(Dispatchers.IO) {
            list = databaseService.userDao().getAllUsers()
        }
        return setRankToAllUsers(list)
    }

}