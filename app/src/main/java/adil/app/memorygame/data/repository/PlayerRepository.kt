package adil.app.memorygame.data.repository

import adil.app.memorygame.data.local.db.DatabaseService
import adil.app.memorygame.data.local.db.entity.Player
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking

class PlayerRepository(private val databaseService: DatabaseService) {

    /**
     * Ranking all the players based on their scores
     * @return is the list of players sorted as per their rank.
     */
    private fun List<Player>.setRankToAllUsers(): List<Player> =
        this.sortedByDescending { it.score }.also {
            var prevRank = 1
            var prevScore = Int.MIN_VALUE
            it.map { player ->
                when {
                    prevScore == Int.MIN_VALUE -> {
                        player.rank = prevRank
                    }
                    player.score == prevScore -> player.rank = prevRank
                    else -> player.rank = ++prevRank
                }
                prevScore = player.score
            }
        }

    /**
     * saving the player in the database
     * @param player is the item which we are storing in database
     * @return is the player id generated by the database
     * on successful storage of the player.
     */
    fun savePlayer(player: Player): Long {
        var id: Long
        runBlocking(Dispatchers.IO) {
            id = databaseService.playerDao().insert(player)
        }
        return id
    }

    /**
     * fetching the list of all the players from the database
     */
    fun getAllPlayers(): List<Player> {
        lateinit var list: List<Player>
        runBlocking(Dispatchers.IO) {
            list = databaseService.playerDao()
                .getAllUsers()
                .setRankToAllUsers()
        }
        return list
    }

}